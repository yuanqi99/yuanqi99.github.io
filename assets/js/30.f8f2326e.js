(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{768:function(s,a,t){"use strict";t.r(a);var n=t(5),e=Object(n.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[s._v("说明")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v("\t待补充\n")])])])]),s._v(" "),t("p",[s._v("以下是 OpenFegin 使用简介的 Markdown 格式文本：")]),s._v(" "),t("h2",{attrs:{id:"openfegin-使用简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#openfegin-使用简介"}},[s._v("#")]),s._v(" OpenFegin 使用简介")]),s._v(" "),t("p",[s._v("OpenFegin 是一个基于 HTTP 的 RESTful 风格的远程过程调用（RPC）框架，用于在 Java 应用程序之间进行远程调用。它使用 HTTP 作为传输协议，通过 JSON 或 XML 等格式传输数据。OpenFegin 旨在简化远程调用过程，提供简单、高效、可靠的工具，适用于微服务架构和云原生应用。")]),s._v(" "),t("h3",{attrs:{id:"一、概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、概述"}},[s._v("#")]),s._v(" 一、概述")]),s._v(" "),t("h3",{attrs:{id:"_1-1-背景和目的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-背景和目的"}},[s._v("#")]),s._v(" 1.1 背景和目的")]),s._v(" "),t("p",[s._v("随着互联网技术和云计算的发展，越来越多的应用程序采用分布式架构，将不同的功能模块划分为独立的微服务。这种架构模式可以增强系统的灵活性和可伸缩性，但同时也带来了远程调用的需求。OpenFegin 就是为了满足这种需求而开发的远程过程调用框架。")]),s._v(" "),t("h3",{attrs:{id:"_1-2-主要特点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-主要特点"}},[s._v("#")]),s._v(" 1.2 主要特点")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("基于 HTTP 的 RESTful 风格")]),s._v("：OpenFegin 使用 HTTP 作为传输协议，支持 RESTful 风格的远程调用。它基于 Feign 客户端库，可以与 Spring Boot 等流行的 Java Web 框架集成。")]),s._v(" "),t("li",[t("strong",[s._v("简洁的 API")]),s._v("：OpenFegin 提供简洁的 API，使得开发者能够以声明式的方式定义远程服务接口和处理程序。它支持注解和配置两种方式来定义请求和响应的映射关系。")]),s._v(" "),t("li",[t("strong",[s._v("支持多种数据格式")]),s._v("：OpenFegin 支持多种数据格式，包括 JSON、XML、表单等。开发者可以根据需要选择适合的数据格式进行传输。")]),s._v(" "),t("li",[t("strong",[s._v("可定制的处理器")]),s._v("：OpenFegin 支持自定义处理器，允许开发者扩展框架的功能。例如，可以编写自定义的请求和响应处理器，实现特定的序列化和反序列化逻辑。")]),s._v(" "),t("li",[t("strong",[s._v("负载均衡和容错")]),s._v("：OpenFegin 内置了多种负载均衡策略，如轮询、随机等。它还支持容错机制，如重试次数限制、超时设置等。")]),s._v(" "),t("li",[t("strong",[s._v("与 Spring Cloud 和 Kubernetes 集成")]),s._v("：OpenFegin 可以与 Spring Cloud 和 Kubernetes 等容器编排工具集成，使得部署和管理微服务更加方便。")])]),s._v(" "),t("h3",{attrs:{id:"二、使用场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、使用场景"}},[s._v("#")]),s._v(" 二、使用场景")]),s._v(" "),t("p",[s._v("OpenFegin 主要适用于以下场景：")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("微服务架构")]),s._v("：OpenFegin 非常适合构建微服务应用程序，可以轻松地实现服务间的远程调用。它与 Spring Cloud 等框架集成，使得配置和管理微服务更加方便。")]),s._v(" "),t("li",[t("strong",[s._v("云原生应用")]),s._v("：OpenFegin 可以与容器技术如 Docker 和 Kubernetes 等集成，适用于云原生应用开发。它提供简洁的 API 和可扩展的处理器，使得开发者可以轻松地处理云原生环境中的远程调用需求。")]),s._v(" "),t("li",[t("strong",[s._v("API 接口调用")]),s._v("：使用 OpenFegin 可以简化 API 接口的开发和调用过程。它提供声明式的 API 定义方式，使得开发者可以更加关注业务逻辑而不是通信细节。")]),s._v(" "),t("li",[t("strong",[s._v("跨语言调用")]),s._v("：OpenFegin 支持多种语言，可以使用不同语言编写的服务进行远程调用。这对于多语言团队或使用多种技术栈的项目非常有用。")])]),s._v(" "),t("h3",{attrs:{id:"三、使用方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三、使用方法"}},[s._v("#")]),s._v(" 三、使用方法")]),s._v(" "),t("p",[s._v("使用 OpenFegin 非常简单，只需遵循以下步骤：")]),s._v(" "),t("h3",{attrs:{id:"_3-1-定义服务接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-定义服务接口"}},[s._v("#")]),s._v(" 3.1 定义服务接口")]),s._v(" "),t("p",[s._v("首先需要定义服务接口，包括需要调用的远程方法及其参数。使用 Java 接口定义即可，例如：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HelloService")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sayHello")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h3",{attrs:{id:"_3-2-发布服务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-发布服务"}},[s._v("#")]),s._v(" 3.2 发布服务")]),s._v(" "),t("p",[s._v("使用 OpenFegin 将服务发布到服务器，使其可供其他应用程序调用。这可以通过在服务提供者端添加 OpenFeign 的 Spring Boot starter 依赖来实现。然后，在应用程序配置中定义要发布的服务接口及其实现类。例如：")]),s._v(" "),t("div",{staticClass:"language-yaml line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-yaml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# application.yml")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("feign")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("client")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" com.example.HelloService\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h3",{attrs:{id:"_3-3-调用服务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-调用服务"}},[s._v("#")]),s._v(" 3.3 调用服务")]),s._v(" "),t("p",[s._v("在客户端应用程序中使用 OpenFegin 框架调用发布的服务。首先，添加 OpenFeign 的 Spring Boot starter 依赖。然后，在客户端应用程序中创建一个 Feign 客户端，并使用该客户端创建远程服务的代理对象。通过代理对象调用远程方法并获取返回结果。例如：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@FeignClient")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("value "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"com.example.HelloService"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HelloServiceClient")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@RequestMapping")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("value "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/hello"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" method "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RequestMethod")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("GET"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sayHello")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@RequestParam")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"name"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("然后，在应用程序中使用 "),t("code",[s._v("HelloServiceClient")]),s._v(" 进行远程调用：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HelloServiceClient")]),s._v(" client "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Feign"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Builder")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("target")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HelloServiceClient")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"http://localhost:8080/hello"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" result "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" client"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sayHello")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"John"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("OpenFeign是一个基于HTTP的RESTful风格的远程过程调用（RPC）框架，用于在Java应用程序之间进行远程调用。它使用HTTP作为传输协议，通过JSON或XML等格式传输数据。OpenFeign旨在简化远程调用过程，提供简单、高效、可靠的工具，适用于微服务架构和云原生应用。在本文中，我们将深入探讨OpenFeign的原理和编写方法。")]),s._v(" "),t("h3",{attrs:{id:"openfeign的原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#openfeign的原理"}},[s._v("#")]),s._v(" OpenFeign的原理")]),s._v(" "),t("p",[s._v("1.1 背景和目的")]),s._v(" "),t("p",[s._v("随着互联网技术和云计算的发展，越来越多的应用程序采用分布式架构，将不同的功能模块划分为独立的微服务。这种架构模式可以增强系统的灵活性和可伸缩性，但同时也带来了远程调用的需求。OpenFeign就是为了满足这种需求而开发的远程过程调用框架。")]),s._v(" "),t("p",[s._v("1.2 主要特点")]),s._v(" "),t("ul",[t("li",[s._v("基于HTTP的RESTful风格：OpenFeign使用HTTP作为传输协议，支持RESTful风格的远程调用。它基于Feign客户端库，可以与Spring Boot等流行的Java Web框架集成。")]),s._v(" "),t("li",[s._v("简洁的API：OpenFeign提供简洁的API，使得开发者能够以声明式的方式定义远程服务接口和处理程序。它支持注解和配置两种方式来定义请求和响应的映射关系。")]),s._v(" "),t("li",[s._v("支持多种数据格式：OpenFeign支持多种数据格式，包括JSON、XML、表单等。开发者可以根据需要选择适合的数据格式进行传输。")]),s._v(" "),t("li",[s._v("可定制的处理器：OpenFeign支持自定义处理器，允许开发者扩展框架的功能。例如，可以编写自定义的请求和响应处理器，实现特定的序列化和反序列化逻辑。")]),s._v(" "),t("li",[s._v("负载均衡和容错：OpenFeign内置了多种负载均衡策略，如轮询、随机等。它还支持容错机制，如重试次数限制、超时设置等。")]),s._v(" "),t("li",[s._v("与Spring Cloud和Kubernetes集成：OpenFeign可以与Spring Cloud和Kubernetes等容器编排工具集成，使得部署和管理微服务更加方便。")])]),s._v(" "),t("h3",{attrs:{id:"工作流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#工作流程"}},[s._v("#")]),s._v(" 工作流程")]),s._v(" "),t("p",[s._v("OpenFeign的工作流程如下：")]),s._v(" "),t("ol",[t("li",[s._v("开发者在客户端应用程序中定义一个或多个Feign客户端，用于访问远程服务。每个Feign客户端都代表一个远程服务接口。")]),s._v(" "),t("li",[s._v("开发者在客户端应用程序中通过注解或配置方式来声明要调用的远程方法及其参数。例如，使用@RequestMapping注解来指定请求的URL、HTTP方法、参数等信息。")]),s._v(" "),t("li",[s._v("客户端应用程序将请求发送到OpenFeign的调度器。调度器根据配置的规则将请求路由到相应的Feign客户端。")]),s._v(" "),t("li",[s._v("Feign客户端根据配置的远程服务地址生成HTTP请求，并将请求数据序列化为指定的数据格式（如JSON或XML）。")]),s._v(" "),t("li",[s._v("Feign客户端将生成的HTTP请求发送到远程服务。")]),s._v(" "),t("li",[s._v("远程服务处理请求并返回HTTP响应。")]),s._v(" "),t("li",[s._v("Feign客户端从HTTP响应中反序列化响应数据，并将其传递给开发者在客户端应用程序中定义的处理器进行处理。")]),s._v(" "),t("li",[s._v("开发者在客户端应用程序中处理响应数据并执行后续操作。")])])])}),[],!1,null,null,null);a.default=e.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{761:function(a,n,e){"use strict";e.r(n);var t=e(5),r=Object(t.a)({},(function(){var a=this,n=a.$createElement,e=a._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h2",{attrs:{id:"spring原理讲解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring原理讲解"}},[a._v("#")]),a._v(" Spring原理讲解")]),a._v(" "),e("h3",{attrs:{id:"_1、什么是spring框架-spring框架主要包含哪些模块"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、什么是spring框架-spring框架主要包含哪些模块"}},[a._v("#")]),a._v(" 1、什么是Spring框架，Spring框架主要包含哪些模块")]),a._v(" "),e("p",[a._v("Spring是一个开源框架，Spring是一个轻量级的Java 开发框架。它是为了解决企业应用开发的复杂性而创建的。框架的主要优势之一就是其分层架构，分层架构允许使用者选择使用哪一个组件，同时为 J2EE 应用程序开发提供集成的框架。Spring使用基本的JavaBean来完成以前只可能由EJB完成的事情。然而，Spring的用途不仅限于服务器端的开发。从简单性、可测试性和松耦合的角度而言，任何Java应用都可以从Spring中受益。Spring的核心是控制反转（IoC）和面向切面（AOP）。简单来说，Spring是一个分层的full-stack(一站式) 轻量级开源框架。")]),a._v(" "),e("p",[a._v("主要包含的模块：")]),a._v(" "),e("h3",{attrs:{id:"_2、spring框架的优势"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、spring框架的优势"}},[a._v("#")]),a._v(" 2、Spring框架的优势")]),a._v(" "),e("p",[a._v("1、Spring通过DI、AOP和消除样板式代码来简化企业级Java开发")]),a._v(" "),e("p",[a._v("2、Spring框架之外还存在一个构建在核心框架之上的庞大生态圈，它将Spring扩展到不同的领域，如Web服务、REST、移动开发以及NoSQL")]),a._v(" "),e("p",[a._v("3、低侵入式设计，代码的污染极低")]),a._v(" "),e("p",[a._v("4、独立于各种应用服务器，基于Spring框架的应用，可以真正实现Write Once,Run Anywhere的承诺")]),a._v(" "),e("p",[a._v("5、Spring的IoC容器降低了业务对象替换的复杂性，提高了组件之间的解耦")]),a._v(" "),e("p",[a._v("6、Spring的AOP允许将一些通用任务如安全、事务、日志等进行集中式处理，从而提供了更好的复用")]),a._v(" "),e("p",[a._v("7、Spring的ORM和DAO提供了与第三方持久层框架的的良好整合，并简化了底层的数据库访问")]),a._v(" "),e("p",[a._v("8、Spring的高度开放性，并不强制应用完全依赖于Spring，开发者可自由选用Spring框架的部分或全部")]),a._v(" "),e("h3",{attrs:{id:"_3、ioc和di是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、ioc和di是什么"}},[a._v("#")]),a._v(" 3、IOC和DI是什么？")]),a._v(" "),e("p",[a._v("IOC的核心是通过反射创建对象、操作对象。最重要的接口BeanFactory")]),a._v(" "),e("p",[a._v("控制反转是就是应用本身不负责依赖对象的创建和维护,依赖对象的创建及维护是由外部容器负责的,这样控制权就有应用转移到了外部容器,控制权的转移就是控制反转。")]),a._v(" "),e("p",[a._v("依赖注入是指:在程序运行期间,由外部容器动态地将依赖对象注入到组件中如：一般，通过构造函数注入或者setter注入。")]),a._v(" "),e("h3",{attrs:{id:"_4、描述下spring-ioc容器的初始化过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4、描述下spring-ioc容器的初始化过程"}},[a._v("#")]),a._v(" 4、描述下Spring IOC容器的初始化过程")]),a._v(" "),e("p",[a._v("Spring IOC容器的初始化简单的可以分为三个过程：")]),a._v(" "),e("p",[a._v("第一个过程是Resource资源定位。这个Resouce指的是BeanDefinition的资源定位。这个过程就是容器找数据的过程，就像水桶装水需要先找到水一样。")]),a._v(" "),e("p",[a._v("第二个过程是BeanDefinition的载入过程。这个载入过程是把用户定义好的Bean表示成Ioc容器内部的数据结构，而这个容器内部的数据结构就是BeanDefition。")]),a._v(" "),e("p",[a._v("第三个过程是向IOC容器注册这些BeanDefinition的过程，这个过程就是将前面的BeanDefition保存到HashMap和CurrentHashMap中的过程。")]),a._v(" "),e("h3",{attrs:{id:"_5、beanfactory-和-factorybean的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5、beanfactory-和-factorybean的区别"}},[a._v("#")]),a._v(" 5、BeanFactory 和 FactoryBean的区别？")]),a._v(" "),e("p",[a._v("BeanFactory是个Factory，也就是IOC容器或对象工厂，在Spring中，所有的Bean都是由BeanFactory(也就是IOC容器)来进行管理的，提供了实例化对象和拿对象的功能。")]),a._v(" "),e("p",[a._v("使用场景：")]),a._v(" "),e("p",[a._v("从Ioc容器中获取Bean(byName or byType)\n检索Ioc容器中是否包含指定的Bean\n判断Bean是否为单例\nFactoryBean是个Bean，这个Bean不是简单的Bean，而是一个能生产或者修饰对象生成的工厂Bean,它的实现与设计模式中的工厂模式和修饰器模式类似。")]),a._v(" "),e("p",[a._v("使用场景")]),a._v(" "),e("p",[a._v("ProxyFactoryBean")]),a._v(" "),e("h3",{attrs:{id:"_6、beanfactory和applicationcontext的异同"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6、beanfactory和applicationcontext的异同"}},[a._v("#")]),a._v(" 6、BeanFactory和ApplicationContext的异同")]),a._v(" "),e("p",[a._v("相同：")]),a._v(" "),e("p",[a._v("Spring提供了两种不同的IOC 容器，一个是BeanFactory，另外一个是ApplicationContext，它们都是Java interface，ApplicationContext继承于BeanFactory(ApplicationContext继承ListableBeanFactory。\n它们都可以用来配置XML属性，也支持属性的自动注入。\n而ListableBeanFactory继承BeanFactory)，BeanFactory 和 ApplicationContext 都提供了一种方式，使用getBean(“bean name”)获取bean。\n不同：")]),a._v(" "),e("p",[a._v("当你调用getBean()方法时，BeanFactory仅实例化bean，而ApplicationContext 在启动容器的时候实例化单例bean，不会等待调用getBean()方法时再实例化。\nBeanFactory不支持国际化，即i18n，但ApplicationContext提供了对它的支持。\nBeanFactory与ApplicationContext之间的另一个区别是能够将事件发布到注册为监听器的bean。\nBeanFactory 的一个核心实现是XMLBeanFactory 而ApplicationContext 的一个核心实现是ClassPathXmlApplicationContext，Web容器的环境我们使用WebApplicationContext并且增加了getServletContext 方法。\n如果使用自动注入并使用BeanFactory，则需要使用API注册AutoWiredBeanPostProcessor，如果使用ApplicationContext，则可以使用XML进行配置。\n简而言之，BeanFactory提供基本的IOC和DI功能，而ApplicationContext提供高级功能，BeanFactory可用于测试和非生产使用，但ApplicationContext是功能更丰富的容器实现，应该优于BeanFactory")]),a._v(" "),e("h3",{attrs:{id:"_7、spring-bean-的生命周期"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7、spring-bean-的生命周期"}},[a._v("#")]),a._v(" 7、Spring Bean 的生命周期？")]),a._v(" "),e("p",[a._v("总结：")]),a._v(" "),e("p",[a._v("（1）实例化Bean：")]),a._v(" "),e("p",[a._v("对于BeanFactory容器，当客户向容器请求一个尚未初始化的bean时，或初始化bean的时候需要注入另一个尚未初始化的依赖时，容器就会调用createBean进行实例化。对于ApplicationContext容器，当容器启动结束后，通过获取BeanDefinition对象中的信息，实例化所有的bean。")]),a._v(" "),e("p",[a._v("（2）设置对象属性（依赖注入）：")]),a._v(" "),e("p",[a._v("实例化后的对象被封装在BeanWrapper对象中，紧接着，Spring根据BeanDefinition中的信息 以及 通过BeanWrapper提供的设置属性的接口完成依赖注入。")]),a._v(" "),e("p",[a._v("（3）处理Aware接口：")]),a._v(" "),e("p",[a._v("接着，Spring会检测该对象是否实现了xxxAware接口，并将相关的xxxAware实例注入给Bean：")]),a._v(" "),e("p",[a._v("①如果这个Bean已经实现了BeanNameAware接口，会调用它实现的setBeanName(String beanId)方法，此处传递的就是Spring配置文件中Bean的id值；")]),a._v(" "),e("p",[a._v("②如果这个Bean已经实现了BeanFactoryAware接口，会调用它实现的setBeanFactory()方法，传递的是Spring工厂自身。")]),a._v(" "),e("p",[a._v("③如果这个Bean已经实现了ApplicationContextAware接口，会调用setApplicationContext(ApplicationContext)方法，传入Spring上下文；")]),a._v(" "),e("p",[a._v("（4）BeanPostProcessor：")]),a._v(" "),e("p",[a._v("如果想对Bean进行一些自定义的处理，那么可以让Bean实现了BeanPostProcessor接口，那将会调用postProcessBeforeInitialization(Object obj, String s)方法。")]),a._v(" "),e("p",[a._v("（5）InitializingBean 与 init-method：")]),a._v(" "),e("p",[a._v("如果Bean在Spring配置文件中配置了 init-method 属性，则会自动调用其配置的初始化方法。")]),a._v(" "),e("p",[a._v("（6）如果这个Bean实现了BeanPostProcessor接口，将会调用postProcessAfterInitialization(Object obj, String s)方法；AOP就是在这个地方进行扩展的。由于这个方法是在Bean初始化结束时调用的，所以可以被应用于内存或缓存技术；")]),a._v(" "),e("p",[a._v("以上几个步骤完成后，Bean就已经被正确创建了，之后就可以使用这个Bean了。")]),a._v(" "),e("p",[a._v("（7）DisposableBean：")]),a._v(" "),e("p",[a._v("当Bean不再需要时，会经过清理阶段，如果Bean实现了DisposableBean这个接口，会调用其实现的destroy()方法；")]),a._v(" "),e("p",[a._v("（8）destroy-method：")]),a._v(" "),e("p",[a._v("最后，如果这个Bean的Spring配置中配置了destroy-method属性，会自动调用其配置的销毁方法。")]),a._v(" "),e("h3",{attrs:{id:"_8、spring-aop的实现原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8、spring-aop的实现原理"}},[a._v("#")]),a._v(" 8、Spring AOP的实现原理？")]),a._v(" "),e("p",[a._v("Spring AOP使用的动态代理，所谓的动态代理就是说AOP框架不会去修改字节码，而是在内存中临时为方法生成一个AOP对象，这个AOP对象包含了目标对象的全部方法，并且在特定的切点做了增强处理，并回调原对象的方法。")]),a._v(" "),e("p",[a._v("Spring AOP中的动态代理主要有两种方式，JDK动态代理和CGLIB动态代理。JDK动态代理通过反射来接收被代理的类，并且要求被代理的类必须实现一个接口。JDK动态代理的核心是InvocationHandler接口和Proxy类。")]),a._v(" "),e("p",[a._v("如果目标类没有实现接口，那么Spring AOP会选择使用CGLIB来动态代理目标类。CGLIB（Code Generation Library），是一个代码生成的类库，可以在运行时动态的生成某个类的子类，注意，CGLIB是通过继承的方式做的动态代理，因此如果某个类被标记为final，那么它是无法使用CGLIB做动态代理的。")]),a._v(" "),e("h3",{attrs:{id:"_9、spring-是如何管理事务的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9、spring-是如何管理事务的"}},[a._v("#")]),a._v(" 9、Spring 是如何管理事务的？")]),a._v(" "),e("p",[a._v("Spring事务管理主要包括3个接口，Spring的事务主要是由它们(PlatformTransactionManager，TransactionDefinition，TransactionStatus)三个共同完成的。")]),a._v(" "),e("ol",[e("li",[a._v("PlatformTransactionManager：事务管理器–主要用于平台相关事务的管理")])]),a._v(" "),e("p",[a._v("主要有三个方法：")]),a._v(" "),e("p",[a._v("commit 事务提交；\nrollback 事务回滚；\ngetTransaction 获取事务状态。")]),a._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[a._v("TransactionDefinition：事务定义信息–用来定义事务相关的属性，给事务管理器PlatformTransactionManager使用")])]),a._v(" "),e("p",[a._v("这个接口有下面四个主要方法：")]),a._v(" "),e("p",[a._v("getIsolationLevel：获取隔离级别；\ngetPropagationBehavior：获取传播行为；\ngetTimeout：获取超时时间；\nisReadOnly：是否只读（保存、更新、删除时属性变为false–可读写，查询时为true–只读）\n事务管理器能够根据这个返回值进行优化，这些事务的配置信息，都可以通过配置文件进行配置。")]),a._v(" "),e("ol",{attrs:{start:"3"}},[e("li",[a._v("TransactionStatus：事务具体运行状态–事务管理过程中，每个时间点事务的状态信息。")])]),a._v(" "),e("p",[a._v("例如它的几个方法：")]),a._v(" "),e("p",[a._v("hasSavepoint()：返回这个事务内部是否包含一个保存点，\nisCompleted()：返回该事务是否已完成，也就是说，是否已经提交或回滚\nisNewTransaction()：判断当前事务是否是一个新事务\n声明式事务的优缺点：")]),a._v(" "),e("p",[a._v("优点：不需要在业务逻辑代码中编写事务相关代码，只需要在配置文件配置或使用注解（@Transaction），这种方式没有侵入性。\n缺点：声明式事务的最细粒度作用于方法上，如果像代码块也有事务需求，只能变通下，将代码块变为方法。")]),a._v(" "),e("h3",{attrs:{id:"_10、spring-的不同事务传播行为有哪些-干什么用的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_10、spring-的不同事务传播行为有哪些-干什么用的"}},[a._v("#")]),a._v(" 10、Spring 的不同事务传播行为有哪些，干什么用的？"),e("img",{attrs:{src:"https://img-blog.csdnimg.cn/687f74b935964a33a147c00614735e90.jpg?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAUm9ib3RaZXJv,size_16,color_FFFFFF,t_70,g_se,x_16#pic_center",alt:"在这里插入图片描述"}})]),a._v(" "),e("h3",{attrs:{id:"_11、spring-中用到了那些设计模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_11、spring-中用到了那些设计模式"}},[a._v("#")]),a._v(" 11、Spring 中用到了那些设计模式？")]),a._v(" "),e("p",[a._v("代理模式—在AOP中被用的比较多。\n单例模式—在spring配置文件中定义的bean默认为单例模式。\n模板方法—用来解决代码重复的问题。比如. RestTemplate, JmsTemplate, JpaTemplate。\n工厂模式—BeanFactory用来创建对象的实例。\n适配器–spring aop\n装饰器–spring data hashmapper\n观察者-- spring 事件驱动模型\n回调–Spring Aware回调接口")]),a._v(" "),e("h3",{attrs:{id:"_12、spring如何解决循环依赖"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_12、spring如何解决循环依赖"}},[a._v("#")]),a._v(" 12、Spring如何解决循环依赖？")]),a._v(" "),e("p",[a._v("这篇文章讲的很完善：Spring 如何解决循环依赖的问题")]),a._v(" "),e("h3",{attrs:{id:"_13、bean的作用域"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_13、bean的作用域"}},[a._v("#")]),a._v(" 13、bean的作用域")]),a._v(" "),e("p",[a._v("（1）singleton：默认，每个容器中只有一个bean的实例，单例的模式由BeanFactory自身来维护。")]),a._v(" "),e("p",[a._v("（2）prototype：为每一个bean请求提供一个实例。")]),a._v(" "),e("p",[a._v("（3）request：为每一个网络请求创建一个实例，在请求完成以后，bean会失效并被垃圾回收器回收。")]),a._v(" "),e("p",[a._v("（4）session：与request范围类似，确保每个session中有一个bean的实例，在session过期后，bean会随之失效。")]),a._v(" "),e("h3",{attrs:{id:"_14、spring框架中有哪些不同类型的事件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_14、spring框架中有哪些不同类型的事件"}},[a._v("#")]),a._v(" 14、Spring框架中有哪些不同类型的事件")]),a._v(" "),e("p",[a._v("（1）上下文更新事件（ContextRefreshedEvent）：在调用ConfigurableApplicationContext 接口中的refresh()方法时被触发。")]),a._v(" "),e("p",[a._v("（2）上下文开始事件（ContextStartedEvent）：当容器调用ConfigurableApplicationContext的Start()方法开始/重新开始容器时触发该事件。")]),a._v(" "),e("p",[a._v("（3）上下文停止事件（ContextStoppedEvent）：当容器调用ConfigurableApplicationContext的Stop()方法停止容器时触发该事件。")]),a._v(" "),e("p",[a._v("（4）上下文关闭事件（ContextClosedEvent）：当ApplicationContext被关闭时触发该事件。容器被关闭时，其管理的所有单例Bean都被销毁。")]),a._v(" "),e("p",[a._v("（5）请求处理事件（RequestHandledEvent）：在Web应用中，当一个http请求（request）结束触发该事件。")]),a._v(" "),e("p",[a._v("15、Spring通知有哪些类型\n（1）前置通知（Before advice）：在某连接点（join point）之前执行的通知，但这个通知不能阻止连接点前的执行（除非它抛出一个异常）。")]),a._v(" "),e("p",[a._v("（2）返回后通知（After returning advice）：在某连接点（join point）正常完成后执行的通知：例如，一个方法没有抛出任何异常，正常返回。")]),a._v(" "),e("p",[a._v("（3）抛出异常后通知（After throwing advice）：在方法抛出异常退出时执行的通知。")]),a._v(" "),e("p",[a._v("（4）后通知（After (finally) advice）：当某连接点退出的时候执行的通知（不论是正常返回还是异常退出）。")]),a._v(" "),e("p",[a._v("（5）环绕通知（Around Advice）：包围一个连接点（join point）的通知，如方法调用。这是最强大的一种通知类型。 环绕通知可以在方法调用前后完成自定义的行为。它也会选择是否继续执行连接点或直接返回它们自己的返回值或抛出异常来结束执行。 环绕通知是最常用的一种通知类型。")]),a._v(" "),e("h3",{attrs:{id:"_16、spring的自动装配"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_16、spring的自动装配"}},[a._v("#")]),a._v(" 16、Spring的自动装配")]),a._v(" "),e("p",[a._v("在spring中，对象无需自己查找或创建与其关联的其他对象，由容器负责把需要相互协作的对象引用赋予各个对象，使用autowire来配置自动装载模式。")]),a._v(" "),e("p",[a._v("在Spring框架xml配置中共有5种自动装配：")]),a._v(" "),e("p",[a._v("（1）no：默认的方式是不进行自动装配的，通过手工设置ref属性来进行装配bean。")]),a._v(" "),e("p",[a._v("（2）byName：通过bean的名称进行自动装配，如果一个bean的 property 与另一bean 的name 相同，就进行自动装配。")]),a._v(" "),e("p",[a._v("（3）byType：通过参数的数据类型进行自动装配。")]),a._v(" "),e("p",[a._v("（4）constructor：利用构造函数进行装配，并且构造函数的参数通过byType进行装配。")]),a._v(" "),e("p",[a._v("（5）autodetect：自动探测，如果有构造方法，通过 construct的方式自动装配，否则使用 byType的方式自动装配。")]),a._v(" "),e("p",[a._v("基于注解的方式：")]),a._v(" "),e("p",[a._v("使用@Autowired注解来自动装配指定的bean。在使用@Autowired注解之前需要在Spring配置文件进行配置，<context:annotation-config />。在启动spring IoC时，容器自动装载了一个AutowiredAnnotationBeanPostProcessor后置处理器，当容器扫描到@Autowied、@Resource或@Inject时，就会在IoC容器自动查找需要的bean，并装配给该对象的属性。在使用@Autowired时，首先在容器中查询对应类型的bean：")]),a._v(" "),e("p",[a._v("如果查询结果刚好为一个，就将该bean装配给@Autowired指定的数据；")]),a._v(" "),e("p",[a._v("如果查询的结果不止一个，那么@Autowired会根据名称来查找；")]),a._v(" "),e("p",[a._v("如果上述查找的结果为空，那么会抛出异常。解决方法时，使用required=false。")]),a._v(" "),e("p",[a._v("@Autowired可用于：构造函数、成员变量、Setter方法")]),a._v(" "),e("p",[a._v("注：@Autowired和@Resource之间的区别")]),a._v(" "),e("p",[a._v("(1) @Autowired默认是按照类型装配注入的，默认情况下它要求依赖对象必须存在（可以设置它required属性为false）。")]),a._v(" "),e("p",[a._v("，就将该bean装配给@Autowired指定的数据；")]),a._v(" "),e("p",[a._v("如果查询的结果不止一个，那么@Autowired会根据名称来查找；")]),a._v(" "),e("p",[a._v("如果上述查找的结果为空，那么会抛出异常。解决方法时，使用required=false。")]),a._v(" "),e("p",[a._v("@Autowired可用于：构造函数、成员变量、Setter方法")]),a._v(" "),e("p",[a._v("注：@Autowired和@Resource之间的区别")]),a._v(" "),e("p",[a._v("(1) @Autowired默认是按照类型装配注入的，默认情况下它要求依赖对象必须存在（可以设置它required属性为false）。")]),a._v(" "),e("p",[a._v("(2) @Resource默认是按照名称来装配注入的，只有当找不到与名称匹配的bean才会按照类型来装配注入。")])])}),[],!1,null,null,null);n.default=r.exports}}]);
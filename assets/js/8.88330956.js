(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{722:function(r,t,n){r.exports=n.p+"assets/img/img.7886843a.png"},723:function(r,t,n){r.exports=n.p+"assets/img/img_1.11f7c550.png"},724:function(r,t,n){r.exports=n.p+"assets/img/img_2.5eaf0ee0.png"},725:function(r,t,n){r.exports=n.p+"assets/img/img_3.53861e9b.png"},726:function(r,t,n){r.exports=n.p+"assets/img/img_4.d4f644a9.png"},727:function(r,t,n){r.exports=n.p+"assets/img/img_5.f57c7dc1.png"},728:function(r,t,n){r.exports=n.p+"assets/img/img_6.863b1001.png"},729:function(r,t,n){r.exports=n.p+"assets/img/img_7.926b429e.png"},730:function(r,t,n){r.exports=n.p+"assets/img/img_8.49f29063.png"},731:function(r,t,n){r.exports=n.p+"assets/img/img_9.628484fd.png"},732:function(r,t,n){r.exports=n.p+"assets/img/img_10.87d9db87.png"},733:function(r,t,n){r.exports=n.p+"assets/img/img_11.7bf58d1f.png"},734:function(r,t,n){r.exports=n.p+"assets/img/img_12.7bf58d1f.png"},781:function(r,t,n){"use strict";n.r(t);var s=n(5),i=Object(s.a)({},(function(){var r=this,t=r.$createElement,s=r._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[r._v("说明")])]),r._v(" "),s("h2",{attrs:{id:"什么是spring"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是spring"}},[r._v("#")]),r._v(" 什么是Spring?")]),r._v(" "),s("blockquote",[s("p",[r._v("首先，Spring是什么？它是怎么诞生的？它的诞生是为了解决什么问题？@pdai")])]),r._v(" "),s("h3",{attrs:{id:"spring的起源"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring的起源"}},[r._v("#")]),r._v(" Spring的起源")]),r._v(" "),s("blockquote",[s("p",[r._v("百度百科中关于Spring的起源介绍如下：")])]),r._v(" "),s("p",[r._v("要谈Spring的历史，就要先谈J2EE。J2EE应用程序的广泛实现是在1999年和2000年开始的，它的出现带来了诸如事务管理之类的"),s("strong",[r._v("核心中间层概念的标准化")]),r._v("，但是在实践中并没有获得绝对的成功，因为"),s("strong",[r._v("开发效率")]),r._v("，开发难度和实际的"),s("strong",[r._v("性能")]),r._v("都令人失望。")]),r._v(" "),s("p",[r._v("曾经使用过EJB开发JAVA EE应用的人，一定知道，在EJB开始的学习和应用非常的艰苦，很多东西都不能一下子就很容易的理解。EJB要严格地实现各种不同类型的接口，类似的或者重复的代码大量存在。而配置也是复杂和单调，同样使用JNDI进行对象查找的代码也是单调而枯燥。虽然有一些开发工作随着xdoclet的出现，而有所缓解，但是学习EJB的高昂代价，和极低的开发效率，极高的资源消耗，都造成了EJB的使用困难。而Spring出现的初衷就是为了解决类似的这些问题。")]),r._v(" "),s("p",[s("strong",[r._v("Spring的一个最大的目的就是使JAVA EE开发更加容易")]),r._v("。同时，Spring之所以与Struts、Hibernate等单层框架不同，是因为Spring致力于提供一个以统一的、高效的方式构造整个应用，并且可以将单层框架以最佳的组合揉和在一起建立一个连贯的体系。可以说Spring是一个提供了更完善开发环境的一个框架，可以为POJO(Plain Ordinary Java Object)对象提供企业级的服务。")]),r._v(" "),s("p",[r._v("Spring的形成，最初来自Rod Jahnson所著的一本很有影响力的书籍《"),s("a",{attrs:{href:"https://item.jd.com/68619611892.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("Expert One-on-One J2EE Design and Development在新窗口打开"),s("OutboundLink")],1),r._v("》，就是在这本书中第一次出现了Spring的一些核心思想，该书出版于2002年。")]),r._v(" "),s("h3",{attrs:{id:"spring的特性和优势"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring的特性和优势"}},[r._v("#")]),r._v(" Spring的特性和优势")]),r._v(" "),s("blockquote",[s("p",[r._v("Spring Framework有哪些特性，用了这个框架对开发而言有什么好处呢？")])]),r._v(" "),s("p",[r._v("从Spring 框架的"),s("strong",[r._v("特性")]),r._v("来看：")]),r._v(" "),s("ul",[s("li",[r._v("非侵入式：基于Spring开发的应用中的对象可以不依赖于Spring的API")]),r._v(" "),s("li",[r._v("控制反转：IOC——Inversion of Control，指的是将对象的创建权交给 Spring 去创建。使用 Spring 之前，对象的创建都是由我们自己在代码中new创建。而使用 Spring 之后。对象的创建都是给了 Spring 框架。")]),r._v(" "),s("li",[r._v("依赖注入：DI——Dependency Injection，是指依赖的对象不需要手动调用 setXX 方法去设置，而是通过配置赋值。")]),r._v(" "),s("li",[r._v("面向切面编程：Aspect Oriented Programming——AOP")]),r._v(" "),s("li",[r._v("容器：Spring 是一个容器，因为它包含并且管理应用对象的生命周期")]),r._v(" "),s("li",[r._v("组件化：Spring 实现了使用简单的组件配置组合成一个复杂的应用。在 Spring 中可以使用XML和Java注解组合这些对象。")]),r._v(" "),s("li",[r._v("一站式：在 IOC 和 AOP 的基础上可以整合各种企业应用的开源框架和优秀的第三方类库（实际上 Spring 自身也提供了表现层的 SpringMVC 和持久层的 Spring JDBC）")])]),r._v(" "),s("p",[r._v("从使用Spring 框架的"),s("strong",[r._v("好处")]),r._v("看：")]),r._v(" "),s("ul",[s("li",[r._v("Spring 可以使开发人员使用 POJOs 开发企业级的应用程序。只使用 POJOs 的好处是你不需要一个 EJB 容器产品，比如一个应用程序服务器，但是你可以选择使用一个健壮的 servlet 容器，比如 Tomcat 或者一些商业产品。")]),r._v(" "),s("li",[r._v("Spring 在一个单元模式中是有组织的。即使包和类的数量非常大，你只要担心你需要的，而其它的就可以忽略了。")]),r._v(" "),s("li",[r._v("Spring 不会让你白费力气做重复工作，它真正的利用了一些现有的技术，像 ORM 框架、日志框架、JEE、Quartz 和 JDK 计时器，其他视图技术。")]),r._v(" "),s("li",[r._v("测试一个用 Spring 编写的应用程序很容易，因为环境相关的代码被移动到这个框架中。此外，通过使用 JavaBean-style POJOs，它在使用依赖注入注入测试数据时变得更容易。")]),r._v(" "),s("li",[r._v("Spring 的 web 框架是一个设计良好的 web MVC 框架，它为比如 Structs 或者其他工程上的或者不怎么受欢迎的 web 框架提供了一个很好的供替代的选择。MVC 模式导致应用程序的不同方面(输入逻辑，业务逻辑和UI逻辑)分离，同时提供这些元素之间的松散耦合。模型(Model)封装了应用程序数据，通常它们将由 POJO 类组成。视图(View)负责渲染模型数据，一般来说它生成客户端浏览器可以解释 HTML 输出。控制器(Controller)负责处理用户请求并构建适当的模型，并将其传递给视图进行渲染。")]),r._v(" "),s("li",[r._v("Spring 对 JavaEE 开发中非常难用的一些 API（JDBC、JavaMail、远程调用等），都提供了封装，使这些API应用难度大大降低。")]),r._v(" "),s("li",[r._v("轻量级的 IOC 容器往往是轻量级的，例如，特别是当与 EJB 容器相比的时候。这有利于在内存和 CPU 资源有限的计算机上开发和部署应用程序。")]),r._v(" "),s("li",[r._v("Spring 提供了一致的事务管理接口，可向下扩展到（使用一个单一的数据库，例如）本地事务并扩展到全局事务（例如，使用 JTA）")])]),r._v(" "),s("h2",{attrs:{id:"spring有哪些组件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring有哪些组件"}},[r._v("#")]),r._v(" Spring有哪些组件?")]),r._v(" "),s("blockquote",[s("p",[r._v("Spring Framework有哪些组件呢？")])]),r._v(" "),s("p",[r._v("下图来自，"),s("a",{attrs:{href:"https://docs.spring.io/spring-framework/docs/5.0.0.M4/spring-framework-reference/pdf/spring-framework-reference.pdf",target:"_blank",rel:"noopener noreferrer"}},[r._v("官方文档 Spring-framework 5.0在新窗口打开"),s("OutboundLink")],1),r._v("；需要注意的是，虽然这个图来源于Spring Framwork5.0 M4 版本，但是它依然是V4版本的图，比如Spring 5版本中的web模块已经去掉了"),s("strong",[r._v("Portlet模块")]),r._v("，新增了"),s("strong",[r._v("WebFlux模块")]),r._v("等。")]),r._v(" "),s("p",[s("img",{attrs:{src:n(722),alt:"img"}})]),r._v(" "),s("p",[r._v("上图中包含了 Spring 框架的所有模块，这些模块可以满足一切企业级应用开发的需求，在开发过程中可以根据需求有选择性地使用所需要的模块。下面分别对这些模块的作用进行简单介绍（并且结合SpringFramework5.x源码模块帮助你对应好各模块关系）。")]),r._v(" "),s("h3",{attrs:{id:"core-container-spring的核心容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#core-container-spring的核心容器"}},[r._v("#")]),r._v(" Core Container（Spring的核心容器）")]),r._v(" "),s("p",[r._v("Spring 的核心容器是其他模块建立的基础，由 Beans 模块、Core 核心模块、Context 上下文模块和 SpEL 表达式语言模块组成，没有这些核心容器，也不可能有 AOP、Web 等上层的功能。具体介绍如下。")]),r._v(" "),s("ul",[s("li",[s("strong",[r._v("Beans 模块")]),r._v("：提供了框架的基础部分，包括控制反转和依赖注入。")]),r._v(" "),s("li",[s("strong",[r._v("Core 核心模块")]),r._v("：封装了 Spring 框架的底层部分，包括资源访问、类型转换及一些常用工具类。")]),r._v(" "),s("li",[s("strong",[r._v("Context 上下文模块")]),r._v("：建立在 Core 和 Beans 模块的基础之上，集成 Beans 模块功能并添加资源绑定、数据验证、国际化、Java EE 支持、容器生命周期、事件传播等。ApplicationContext 接口是上下文模块的焦点。")]),r._v(" "),s("li",[s("strong",[r._v("SpEL 模块")]),r._v("：提供了强大的表达式语言支持，支持访问和修改属性值，方法调用，支持访问及修改数组、容器和索引器，命名变量，支持算数和逻辑运算，支持从 Spring 容器获取 Bean，它也支持列表投影、选择和一般的列表聚合等。")])]),r._v(" "),s("p",[r._v("对应的源码模块如下：")]),r._v(" "),s("p",[s("img",{attrs:{src:n(723),alt:"img"}})]),r._v(" "),s("h3",{attrs:{id:"data-access-integration-数据访问-集成"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#data-access-integration-数据访问-集成"}},[r._v("#")]),r._v(" Data Access/Integration（数据访问／集成）")]),r._v(" "),s("p",[r._v("数据访问／集成层包括 JDBC、ORM、OXM、JMS 和 Transactions 模块，具体介绍如下。")]),r._v(" "),s("ul",[s("li",[s("strong",[r._v("JDBC 模块")]),r._v("：提供了一个 JDBC 的样例模板，使用这些模板能消除传统冗长的 JDBC 编码还有必须的事务控制，而且能享受到 Spring 管理事务的好处。")]),r._v(" "),s("li",[s("strong",[r._v("ORM 模块")]),r._v("：提供与流行的“对象-关系”映射框架无缝集成的 API，包括 JPA、JDO、Hibernate 和 MyBatis 等。而且还可以使用 Spring 事务管理，无需额外控制事务。")]),r._v(" "),s("li",[s("strong",[r._v("OXM 模块")]),r._v("：提供了一个支持 Object /XML 映射的抽象层实现，如 JAXB、Castor、XMLBeans、JiBX 和 XStream。将 Java 对象映射成 XML 数据，或者将XML 数据映射成 Java 对象。")]),r._v(" "),s("li",[s("strong",[r._v("JMS 模块")]),r._v("：指 Java 消息服务，提供一套 “消息生产者、消息消费者”模板用于更加简单的使用 JMS，JMS 用于用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信。")]),r._v(" "),s("li",[s("strong",[r._v("Transactions 事务模块")]),r._v("：支持编程和声明式事务管理。")])]),r._v(" "),s("p",[r._v("对应的源码模块如下：")]),r._v(" "),s("p",[s("img",{attrs:{src:n(724),alt:"img"}})]),r._v(" "),s("h3",{attrs:{id:"web模块"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#web模块"}},[r._v("#")]),r._v(" Web模块")]),r._v(" "),s("p",[r._v("Spring 的 Web 层包括 Web、Servlet、WebSocket 和 Webflux 组件，具体介绍如下。")]),r._v(" "),s("ul",[s("li",[s("strong",[r._v("Web 模块")]),r._v("：提供了基本的 Web 开发集成特性，例如多文件上传功能、使用的 Servlet 监听器的 IOC 容器初始化以及 Web 应用上下文。")]),r._v(" "),s("li",[s("strong",[r._v("Servlet 模块")]),r._v("：提供了一个 Spring MVC Web 框架实现。Spring MVC 框架提供了基于注解的请求资源注入、更简单的数据绑定、数据验证等及一套非常易用的 JSP 标签，完全无缝与 Spring 其他技术协作。")]),r._v(" "),s("li",[s("strong",[r._v("WebSocket 模块")]),r._v("：提供了简单的接口，用户只要实现响应的接口就可以快速的搭建 WebSocket Server，从而实现双向通讯。")]),r._v(" "),s("li",[s("strong",[r._v("Webflux 模块")]),r._v("： Spring WebFlux 是 Spring Framework 5.x中引入的新的响应式web框架。与Spring MVC不同，它不需要Servlet API，是完全异步且非阻塞的，并且通过Reactor项目实现了Reactive Streams规范。Spring WebFlux 用于创建基于事件循环执行模型的完全异步且非阻塞的应用程序。")])]),r._v(" "),s("p",[r._v("此外Spring4.x中还有Portlet 模块，在Spring 5.x中已经移除")]),r._v(" "),s("ul",[s("li",[s("strong",[r._v("Portlet 模块")]),r._v("：提供了在 Portlet 环境中使用 MVC 实现，类似 Web-Servlet 模块的功能。")])]),r._v(" "),s("p",[r._v("对应的源码模块如下：")]),r._v(" "),s("p",[s("img",{attrs:{src:n(725),alt:"img"}})]),r._v(" "),s("h3",{attrs:{id:"aop、aspects、instrumentation和messaging"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aop、aspects、instrumentation和messaging"}},[r._v("#")]),r._v(" AOP、Aspects、Instrumentation和Messaging")]),r._v(" "),s("p",[r._v("在 Core Container 之上是 AOP、Aspects 等模块，具体介绍如下：")]),r._v(" "),s("ul",[s("li",[s("strong",[r._v("AOP 模块")]),r._v("：提供了面向切面编程实现，提供比如日志记录、权限控制、性能统计等通用功能和业务逻辑分离的技术，并且能动态的把这些功能添加到需要的代码中，这样各司其职，降低业务逻辑和通用功能的耦合。")]),r._v(" "),s("li",[s("strong",[r._v("Aspects 模块")]),r._v("：提供与 AspectJ 的集成，是一个功能强大且成熟的面向切面编程（AOP）框架。")]),r._v(" "),s("li",[s("strong",[r._v("Instrumentation 模块")]),r._v("：提供了类工具的支持和类加载器的实现，可以在特定的应用服务器中使用。")]),r._v(" "),s("li",[s("strong",[r._v("messaging 模块")]),r._v("：Spring 4.0 以后新增了消息（Spring-messaging）模块，该模块提供了对消息传递体系结构和协议的支持。")]),r._v(" "),s("li",[s("strong",[r._v("jcl 模块")]),r._v("： Spring 5.x中新增了日志框架集成的模块。")])]),r._v(" "),s("p",[r._v("对应的源码模块如下：")]),r._v(" "),s("p",[s("img",{attrs:{src:n(726),alt:"img"}})]),r._v(" "),s("h3",{attrs:{id:"test模块"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#test模块"}},[r._v("#")]),r._v(" Test模块")]),r._v(" "),s("p",[r._v("Test 模块：Spring 支持 Junit 和 TestNG 测试框架，而且还额外提供了一些基于 Spring 的测试功能，比如在测试 Web 框架时，模拟 Http 请求的功能。")]),r._v(" "),s("p",[r._v("包含Mock Objects, TestContext Framework, Spring MVC Test, WebTestClient。")]),r._v(" "),s("p",[r._v("对应的源码模块如下：\n"),s("img",{attrs:{src:n(727),alt:"img"}})]),r._v(" "),s("h2",{attrs:{id:"为什么用spring"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么用spring"}},[r._v("#")]),r._v(" 为什么用Spring?")]),r._v(" "),s("blockquote",[s("p",[r._v("那么为什么用Spring呢？来看看"),s("a",{attrs:{href:"https://spring.io/why-spring",target:"_blank",rel:"noopener noreferrer"}},[r._v("官网对这个问题的回答在新窗口打开"),s("OutboundLink")],1)])]),r._v(" "),s("p",[r._v("最重要的体现在它能做什么，这是Spring的核心所在")]),r._v(" "),s("p",[s("img",{attrs:{src:n(728),alt:"img"}})]),r._v(" "),s("p",[r._v("且官方对此专门对此做了详细介绍，感兴趣可以看下")]),r._v(" "),s("p",[s("img",{attrs:{src:n(729),alt:"img"}})]),r._v(" "),s("h2",{attrs:{id:"学习spring时参考哪些资料呢"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#学习spring时参考哪些资料呢"}},[r._v("#")]),r._v(" 学习Spring时参考哪些资料呢？")]),r._v(" "),s("blockquote",[s("p",[r._v("非常负责任的告诉你，最好最全的资料在Spring的官网，Spring能成为最主要的企业开发框架，文档和生态体系也做的很好；这里介绍下如何获取官方的学习资源。@pdai")])]),r._v(" "),s("h3",{attrs:{id:"spring-的官方项目和教程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring-的官方项目和教程"}},[r._v("#")]),r._v(" Spring 的官方项目和教程")]),r._v(" "),s("p",[r._v("官方的项目和教程，地址在"),s("a",{attrs:{href:"https://spring.io/projects/spring-framework",target:"_blank",rel:"noopener noreferrer"}},[r._v("这里在新窗口打开"),s("OutboundLink")],1),r._v("，在学习Spring时，一定要把它当做生态体系，而是不是一个简单的开发框架。")]),r._v(" "),s("p",[s("img",{attrs:{src:n(730),alt:"img"}})]),r._v(" "),s("h3",{attrs:{id:"spring-的归档文档"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring-的归档文档"}},[r._v("#")]),r._v(" Spring 的归档文档")]),r._v(" "),s("p",[r._v("官方提供了系统性的文档的FTP，你可以在"),s("a",{attrs:{href:"https://docs.spring.io/spring-framework/docs/",target:"_blank",rel:"noopener noreferrer"}},[r._v("这里在新窗口打开"),s("OutboundLink")],1),r._v("找到所有历史版本的PDF/HTML版本。")]),r._v(" "),s("p",[s("img",{attrs:{src:n(731),alt:"img"}})]),r._v(" "),s("p",[r._v("可以看到很多系统性的文档，包括上面引用的图，")]),r._v(" "),s("p",[s("img",{attrs:{src:n(732),alt:"img"}}),r._v(" "),s("img",{attrs:{src:n(733),alt:"img"}})]),r._v(" "),s("h3",{attrs:{id:"spring-的官方github"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring-的官方github"}},[r._v("#")]),r._v(" Spring 的官方Github")]),r._v(" "),s("p",[r._v("Spring官方的GitHub在"),s("a",{attrs:{href:"https://github.com/spring-projects/spring-framework",target:"_blank",rel:"noopener noreferrer"}},[r._v("这里在新窗口打开"),s("OutboundLink")],1),r._v("，它包含着Spring-framework的源码，如果你感兴趣，可以从这里clone代码进行阅读。")]),r._v(" "),s("p",[s("img",{attrs:{src:n(734),alt:"img"}})]),r._v(" "),s("hr"),r._v(" "),s("p",[r._v("著作权归@pdai所有 原文链接：https://pdai.tech/md/spring/spring-x-framework-introduce.html")])])}),[],!1,null,null,null);t.default=i.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{713:function(t,n,s){t.exports=s.p+"assets/img/img.7512d5e0.png"},714:function(t,n,s){t.exports=s.p+"assets/img/img_1.a683b0e6.png"},715:function(t,n,s){t.exports=s.p+"assets/img/img_2.7a5694dc.png"},716:function(t,n,s){t.exports=s.p+"assets/img/img_3.8c401a7b.png"},717:function(t,n,s){t.exports=s.p+"assets/img/img_4.810576c7.png"},756:function(t,n,s){"use strict";s.r(n);var a=s(5),e=Object(a.a)({},(function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("说明")])]),t._v(" "),a("h2",{attrs:{id:"innodb-的发展历史"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#innodb-的发展历史"}},[t._v("#")]),t._v(" Innodb 的发展历史")]),t._v(" "),a("ul",[a("li",[t._v("Innodb 存储简介")]),t._v(" "),a("li",[t._v("什么扇区？什么是块？什么是page?和innno存储有什么关系？")]),t._v(" "),a("li",[t._v("理解innodb的表空间\nInnoDB发展历史简介\nInnoDB是事务安全的存储引擎，设计上借鉴了很多Oracle的架构思想，一般而言，在OLTP应用中，InnoDB应该作为核心应用表的首先存储引擎。InnoDB是由第三方的Innobase Oy公司开发，现已被oracle收购，创始人是Heikki Tuuri，芬兰赫尔辛基人，和著名的Linux创始人Linus是校友。\nInnoDB和MySQL的一些曲折历史：")]),t._v(" "),a("li",[t._v("InnoDB引擎是由InnobaseOy公司开发。")]),t._v(" "),a("li",[t._v("2001年，Innobase公司开始与MySQL AB公司进行合作并开源InnoDB存储引擎的代码。")]),t._v(" "),a("li",[t._v("Oracle公司在2005年以迅雷不及掩耳之势收购了Innobase公司。")]),t._v(" "),a("li",[t._v("2008年Sun公司收购MySQL AB公司。")]),t._v(" "),a("li",[t._v("2009年Oracle收购Sun公司，而MySQL数据库最终到了Oracle的手中，InnoDB存储引擎和MySQL终于又在一起了。\n2008年发布InnoDB Plugin，适用于MySQL 5.1版本，这是Oracle创建的下一代InnoDB引擎，其拥有者是InnoDB而不是MySQL。\nMySQL 5.1.38前的版本中，当你需要安装InnoDB Plugin时，必须下载Plugin的文件，解压后再进行一系列的安装。\n从MySQL 5.1.38开始，MySQL包含了2个不同版本的InnoDB存储引擎—一个是旧版本的引擎，称之为build-in innodb；另一个是1.0.4版本的InnoDB存储引擎。\nMySQL 5.5 版本以后，默认存储引擎就是 InnoDB 了。 InnoDB 是一种兼顾了高可靠性和高性能的通用存储引擎。在 MySQL 5.7 中，除非你配置了其他默认存储引擎，否则执行 CREATE TABLE 不指定 ENGINE 的语句将创建一个 InnoDB 表。\nInnoDB存储简介\n我们知道InnoDB支持ACID事务，持久性是必须要解决的特性，服务器重启后，数据是不允许丢失的。而从上一节我们学习MySQL 每次读写都直接操作磁盘IO，会带来很大的性能开销。所以InnoDB并不直接使用操作系统提供的文件系统作为直接的存储，而是在文件系统之上封装了一层自己对于存储设备的管理，以保证数据库中数据的完整性和高性能。\n数据从内存到磁盘的操作。为减少磁盘IO的次数，MySQL以页为单位批量的进行操作。InnoDB中页的大小为16K。一般情况下")])]),t._v(" "),a("ol",[a("li",[t._v("一次最少从磁盘中取16K数据到内存中")]),t._v(" "),a("li",[t._v("一次最少将16K的内容刷新到磁盘中。\n在页的基础上，又有了区（extend）的概念, 段（segment）和表空间（table space）如下图所示：显示 了页和文件系统及磁盘存储的映射关系。\n"),a("img",{attrs:{src:s(713),alt:"image"}})])]),t._v(" "),a("ul",[a("li",[t._v("扇区（sector):在物理磁盘上存在的扇区。机器磁盘通过是512B，SSD一般为4K")]),t._v(" "),a("li",[t._v("块（block)文件系统将扇区映射成block方便管理。一般文件系统块为4KB")]),t._v(" "),a("li",[t._v("页：对于InnoDB来讲，其管理的最小单位是页，默认大小为16KB,由文件系统的块构成。")]),t._v(" "),a("li",[t._v("区：(P78)在表中的数据量很大时，为了使数据库获得更好的IO性能,InnoDB引擎为某个表分配空间时不再按照页为单位进行分配了，而是区的方式（extent=64*16K=1M,区里的页号都是连续的）这样做的目的是，提高空间申请的效率以及数据存放的顺序性。若数据可以根据主键顺序存放，那么读取这些页将在一个连续的地址中，这样可以避免磁盘旋转定位带来的巨大的时间开销。将随时IO变为顺序IO。")]),t._v(" "),a("li",[t._v("段：我们知道mysql 的索引是b+树，而我们查询时只是扫描叶子节点的记录，而如果不区分叶子节和非叶子节点，统统把节点代表的页面放到申请到区中，扫描效果就大打折扣了。所以InnoDB对B+树的叶子节和非叶子阳点进行了区分。放叶子节点的区的集合算是一个段（segment),存放非叶子节点的区的集合也算一个段。也就是默认情况下，一个表会默认有一个聚集索引，则至少有两个段。")]),t._v(" "),a("li",[t._v("表空间\n"),a("img",{attrs:{src:s(714),alt:"image"}})])]),t._v(" "),a("h3",{attrs:{id:"b-树索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#b-树索引"}},[t._v("#")]),t._v(" B+树索引")]),t._v(" "),a("p",[t._v("File Header 这个部分存储了页的一些通用属性信息，包括页号，上一页页号，下一页页号，页类型等，这些属性把mysql的记录数据的页，连成了一个双向链表，使各数据页不需要在连续的物理空间存储，我们也可以根据这些属性寻找到下一页或者上一页，同时，这些页也是有序的，和页内记录顺序是一样的")]),t._v(" "),a("h3",{attrs:{id:"innodb的查询过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#innodb的查询过程"}},[t._v("#")]),t._v(" InnoDB的查询过程")]),t._v(" "),a("p",[t._v("在我们要探寻索引的查询的时候，我们先来思考一个问题，当我们数据量很少（一个页就足够存储）的情况下，我们是怎么查询的。\n分为2种情况：")]),t._v(" "),a("ol",[a("li",[t._v("以主键（索引键）为搜索条件：这个查找过程我们应该已经很熟悉了（不熟悉看上一节），我们可以在页目录中，用二分法快速定位到对应的槽，然后根据槽找到对应的小组，遍历组内记录，即可查询成功。")]),t._v(" "),a("li",[t._v("不以主键（索引键）为搜索条件：这种情况就只能从最小记录一个个遍历到最大记录进行对比，很显然，这种情况查询的效率很低。\n然而，大多数时候，我们的数据都不可能只用一个页就能存储的下来，所以我们会有很多的数据页去存储这些记录，那么在很多的数据页中，我们又应该怎么去查询呢？")])]),t._v(" "),a("p",[t._v("可以分为2个步骤：")]),t._v(" "),a("ol",[a("li",[t._v("定位到记录所在的页。")]),t._v(" "),a("li",[t._v("然后根据上面讲的页内的查找方法进行查找。\n第2步我们已经会了，那么剩下的主要工作就在第1步上了，在多数据页且没有索引的情况下，无论我们是否根据主键查找，我们都无法快速定位到记录所在的页，所以只能从第一页沿着双向链表一直往下找，这种方式不用多说，肯定非常耗时，mysql肯定不会选择这种方式啦，那么我们就要找寻一种高效的方式去进行查找。")])]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("create table "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("index_test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\nc1 int"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nc2 int"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nc3 "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nprimary "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("key")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("row_format"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("compact"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\ninsert into index_test "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("values")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'u'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'d'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'y'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'o'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'d'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'e'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'x'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("209")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("300")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'i'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("p",[a("img",{attrs:{src:s(715),alt:"image"}}),t._v("\n首先，我们来构建几个存储数据的页，这些页里存储了一些记录，我们用他们的第一个值来进行排序，这些值为：【1,3,4,5,8,10,12,20,100,209,220,300】。如上图 ，这里注意，页号并不是从小到大排列的，mysql虽然会尽量把页面相邻，但是因为页并不是连续的存储空间，所以他们只是通过每页的文件头的上一页、下一页的属性进行连接，建立链表关系。既然目前我们在多页查找中无法快速定位这些页，那我们就要想一些办法去定位记录页，我们通过之前能知道这些页形成的链表其实也是有序的，既然有序，我们又同样想到了二分，那就把这些页的编号(page_no)和最小值(key)跟我们上面讲到的记录槽的方式一样记录下来，然后进行二分查找，不就能快速定位到对应的记录页了吗。当然可以，那我们就把页内最小的那个数据的值和页号对应记录下来，形成一个目录，这样得到的目录还有一个名字，叫索引！所以我们的页的数据结构就变成了这个样子：\n"),a("img",{attrs:{src:s(716),alt:"image"}}),t._v("\n那么我们现在的查询就应该是这么一个流程了（比如我们现在需要查找键值为20的记录）：")]),t._v(" "),a("ol",[a("li",[t._v("先从目录项（索引）中根据二分法快速定位到数据记录应该在目录项3，因为12≤20≤209，所以它对应的页号是页9。")]),t._v(" "),a("li",[t._v("然后通过上面说到的页内查找的方式进行查询。")])]),t._v(" "),a("hr"),t._v(" "),a("h2",{attrs:{id:"二阶段提交"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二阶段提交"}},[t._v("#")]),t._v(" 二阶段提交")]),t._v(" "),a("p",[t._v("redolog是记录脏页中数据变化的，redolog的作用是为了提高事务提交效率的，解除了commit与数据落盘（无序写入情况）的耦合，利用了日志先行提高效率。\nundolog\nundolog与本文问题关系不大，主要体现在了MVCC与事务回滚中。\nbinlog(逻辑)")]),t._v(" "),a("p",[t._v("binlog 文件是记录了所有数据库表结构变更和表数据修改的日志， 用于备份恢复、主从复制。binlog 文件保存的是全量的日志，也就是保存了所有数据变更的情况，理论上只要记录在 binlog 上的数据，都可以恢复，所以如果不小心整个数据库的数据被删除了，得用 binlog 文件恢复数据。\nbinlog有三种编码格式分别是 row statement mixed\nstatement 基于SQL语句的复制(statement-based replication, SBR)\n每一条会修改数据的sql语句都会记录到binlog中。优点是并不需要记录每一条sql语句和每一行的数据变化，减少了binlog日志量，节约IO，提高性能。\nUpdate table set f1='content' where f0>10\n在配置文件里面加入配置 binlog_format=statement，然后重启服务。\n执行下面的语句")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("TABLE")]),t._v(" my_test"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("xdx_test")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\nname "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nage "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nbirthday datetime "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ninsert into "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("xdx_test")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("birthday"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("values")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'xdx'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("now")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[t._v("然后我们在打开最新的binlog日志，可以在里面找到上面的语句。\n但就如同上面的 insert 语句，我使用了 now()，这个函数，如果用这个binlog语句去进行备份、同步那么时间字段就对不上了。\nrow 基于行的复制(row-based replication, RBR)\n不记录每条sql语句的上下文信息，仅需记录哪条数据被修改了，修改成什么样了。而且不会出现某些特定情况下的存储过程、或function、或trigger的调用和触发或 now() 无法被正确复制的问题。缺点是会产生大量的日志，尤其是alter table的时候会让日志暴涨。\n修改配置文件为 binlog_format=row ，然后重启服务器即可开启。\nmixed 混合模式复制(mixed-based replication, MBR)\n以上两种模式的混合使用，一般的复制使用STATEMENT模式保存binlog，对于STATEMENT模式无法复制的操作使用ROW模式保存binlog，MySQL会根据执行的SQL语句选择日志保存方式。\n修改配置文件为 binlog_format=mixed ，然后重启服务器即可开启。\nInnodb一次更新事务如何实现（重点）")]),t._v(" "),a("p",[a("img",{attrs:{src:s(717),alt:"image"}})]),t._v(" "),a("p",[t._v("本文核心问题就是，当mysql发生崩溃，客户端commit应该得到一个什么结果呢？")]),t._v(" "),a("p",[t._v("猜想：如果返回失败的话，在写入redolog之前崩溃是无所谓的，因为数据不会真正落盘。在写入redolog prepare阶段后马上崩溃，在mysql恢复过程中会拿着redo log中的XID去binlog中找，当然是找不到的，这时理所当然会回滚redolog中的该XID的事务直到redolog中的XID与binlog中的XID一致。")]),t._v(" "),a("p",[t._v("问题发生在写入binlog后崩溃，在恢复时，由redolog中的XID时可以找到对应的binlog的，这个时候就会直接提交!!!")]),t._v(" "),a("p",[t._v("那么问题来了，我们的commit是失败呀，这不是造成了客户端的理解与数据库的数据发生不一致了吗？\n那么commit返回成功吗？更不可能了，这会引入更多的问题。")]),t._v(" "),a("p",[t._v("客户端会阻塞，或者失去与mysql的连接报错。\n问题解决方案：做好业务的幂等性，该极端情况是可能发生的。\n但是做好业务幂等是最为稳妥的。")])])}),[],!1,null,null,null);n.default=e.exports}}]);